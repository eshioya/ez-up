package com.rei.ezup;

import com.google.common.collect.ImmutableMap;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.function.Predicate;

import static org.junit.jupiter.api.Assertions.*;

public class EzUpTest extends BaseTemplateTest {
    EzUpConfig globalConfig = new EzUpConfig(false, false, ImmutableMap.of());
    EzUp ezup = new EzUp(globalConfig);
    
    @Test
    public void testFilters() {
        TemplateConfig config = new TemplateConfig(globalConfig);
        config.getIncludedFiles().add("**/*");
        config.getExcludedFiles().add("**/exclude");
        
        assertTrue(allMatch(ezup.getCopyFilters(config), Paths.get("/README.md")));
        assertTrue(allMatch(ezup.getCopyFilters(config), Paths.get("/foo/bar")));
        assertFalse(allMatch(ezup.getCopyFilters(config), Paths.get("/foo/exclude")));
        
        config.getProcessedFiles().add("**/*");
        config.getUnprocessedFiles().add("some-folder/BLAH");
        
        assertTrue(allMatch(ezup.getProcessFilters(config), Paths.get("/README.md")));
        assertTrue(allMatch(ezup.getProcessFilters(config), Paths.get("/foo/bar")));
        assertFalse(allMatch(ezup.getProcessFilters(config), Paths.get("/some-folder/BLAH")));
    }
    
    @Test
    public void canGenerateProject(@TempDir Path tmp) throws Exception {
        Path projectFolder = tmp.resolve("project");
        
        String readme = ezup.generate(getTestTemplateArtifact(tmp), projectFolder);
        
        printDir(projectFolder);
        
        System.out.println(readme);
        assertEquals("Welcome to project my-app! Generated by chairlift-test v1", readme);
        
        assertTrue(Files.exists(projectFolder.resolve("my-app/MyApp.java")));
        assertTrue(Files.exists(projectFolder.resolve("generated-afterwards")));
        assertTrue(Files.isDirectory(projectFolder.resolve("empty")));
        assertFalse(Files.exists(projectFolder.resolve("empty/.retain")));
    }
    
    @Test
    public void canGenerateSubTemplate(@TempDir Path tmp) throws Exception {
        Path projectFolder = tmp.resolve("project");
        
        ezup.generate(getTestTemplateArtifact(tmp), "entity", projectFolder);
        
        printDir(projectFolder);
        
        assertTrue(Files.exists(projectFolder.resolve("com/rei/test/domain/Entity.java")));
        assertTrue(Files.exists(projectFolder.resolve("com/rei/test/persistence/EntityRepository.java")));
    }

    @Test
    public void canGenerateAndWatchTemplate(@TempDir Path tmp) throws Exception {
        Path projectFolder = tmp.resolve("project");

        Path templateDir = getTemplateRootDir();
        CompletableFuture<Void> watcher = ezup.generateAndWatch(templateDir, projectFolder);

        printDir(projectFolder);
        Thread.sleep(30);

        Path addedFile = templateDir.resolve("template/__appName__-added-file.txt");
        try {
            Files.write(addedFile, "this is a new file".getBytes());

            Thread.sleep(500);
            System.out.println("------");
            printDir(projectFolder);
            assertTrue(Files.exists(projectFolder.resolve("my-app-added-file.txt")));


            Files.delete(addedFile);
            Thread.sleep(500);
            System.out.println("------");
            printDir(projectFolder);
            assertFalse(Files.exists(projectFolder.resolve("my-app-added-file.txt")));

            watcher.cancel(true);
        } finally {
            Files.deleteIfExists(addedFile);
        }
    }

    private void printDir(Path dir) throws IOException {
        Files.walkFileTree(dir, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                System.out.println(file);
                return FileVisitResult.CONTINUE;
            }
        });
    }

    private boolean allMatch(List<Predicate<Path>> copyFilters, Path file) {
        return copyFilters.stream().allMatch(p -> p.test(file));
    }
}
